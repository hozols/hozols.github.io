{"version":3,"file":"component---src-pages-projects-yaml-slug-jsx-027f050031cff3bcfbed.js","mappings":"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","sources":["webpack://@kremalicious/portfolio/./src/components/atoms/ProjectImage.jsx","webpack://@kremalicious/portfolio/./src/components/atoms/SEO.jsx","webpack://@kremalicious/portfolio/./src/components/molecules/ProjectTechstack.jsx","webpack://@kremalicious/portfolio/./src/components/molecules/ProjectTechstack.module.css","webpack://@kremalicious/portfolio/./src/components/molecules/ProjectLinks.jsx","webpack://@kremalicious/portfolio/./src/components/molecules/ProjectLinks.module.css","webpack://@kremalicious/portfolio/./src/components/molecules/ProjectNav.jsx","webpack://@kremalicious/portfolio/./src/components/molecules/ProjectNav.module.css","webpack://@kremalicious/portfolio/./src/pages/{ProjectsYaml.slug}.jsx","webpack://@kremalicious/portfolio/./src/pages/{ProjectsYaml.slug}.module.css"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { projectImage as styleProjectImage } from './ProjectImage.module.css'\n\nexport default function ProjectImage({ image, alt, className }) {\n  return (\n    <GatsbyImage\n      className={`${styleProjectImage} ${className || ''}`}\n      backgroundColor=\"transparent\"\n      image={image}\n      alt={alt}\n      as=\"figure\"\n    />\n  )\n}\n\nProjectImage.propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: PropTypes.string.isRequired,\n  className: PropTypes.string\n}\n\nexport const projectImage = graphql`\n  fragment ProjectImageFluid on ImageSharp {\n    gatsbyImageData(layout: CONSTRAINED, width: 1440, quality: 85)\n  }\n`\n\nexport const projectImageTeaser = graphql`\n  fragment ProjectImageTeaser on ImageSharp {\n    gatsbyImageData(layout: CONSTRAINED, width: 740, quality: 85)\n  }\n`\n\nexport const projectImageNav = graphql`\n  fragment ProjectImageNav on ImageSharp {\n    gatsbyImageData(layout: CONSTRAINED, width: 500, quality: 85)\n  }\n`\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { useMeta } from '../../hooks/use-meta'\nimport { useResume } from '../../hooks/use-resume'\n\nconst MetaTags = ({ title, description, url, image }) => {\n  const { basics } = useResume()\n  const twitterHandle = basics.profiles.filter(\n    ({ network }) => network === 'Twitter'\n  )[0].username\n\n  return (\n    <Helmet\n      defaultTitle={`${basics.name.toLowerCase()} { ${basics.label.toLowerCase()} }`}\n      titleTemplate={`%s // ${basics.name.toLowerCase()} { ${basics.label.toLowerCase()} }`}\n      title={title}\n    >\n      <html lang=\"en\" />\n\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={`${basics.website}${image}`} />\n      <link rel=\"canonical\" href={url} />\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={url} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={`${basics.website}${image}`} />\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={twitterHandle} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={`${basics.website}${image}`} />\n    </Helmet>\n  )\n}\n\nMetaTags.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  url: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.object\n}\n\nSEO.propTypes = {\n  project: PropTypes.object\n}\n\nexport default function SEO({ project }) {\n  const meta = useMeta()\n  const { basics } = useResume()\n  const title = (project && project.title) || null\n  const description = (project && project.fields.excerpt) || meta.description\n  const image =\n    (project && project.img.childImageSharp.twitterImage.src) ||\n    meta.img.childImageSharp.resize.src\n  const url = (project && `${basics.website}${project.slug}`) || basics.website\n\n  return (\n    <MetaTags title={title} description={description} url={url} image={image} />\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { projectTechstack, title } from './ProjectTechstack.module.css'\n\nconst ProjectTechstack = ({ techstack }) => (\n  <div className={projectTechstack}>\n    <h3 className={title}>\n      Tools & Technologies <span>The tech stack I was involved with.</span>\n    </h3>\n    <ul>\n      {techstack.map((tech) => (\n        <li key={tech}>{tech}</li>\n      ))}\n    </ul>\n  </div>\n)\n\nProjectTechstack.propTypes = {\n  techstack: PropTypes.array\n}\n\nexport default ProjectTechstack\n","// extracted by mini-css-extract-plugin\nexport var projectTechstack = \"ProjectTechstack-module--projectTechstack--2Tai-\";\nexport var title = \"ProjectTechstack-module--title--X3vkL {ProjectsYaml-slug}-module--metatitle--x2Mnj\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '../atoms/Button'\nimport Icon from '../atoms/Icon'\nimport { projectLinks, title } from './ProjectLinks.module.css'\n\nProjectLinks.propTypes = {\n  links: PropTypes.array\n}\n\nexport default function ProjectLinks({ links }) {\n  return (\n    <div className={projectLinks}>\n      <h3 className={title}>\n        Links <span>Learn more on the interwebz.</span>\n      </h3>\n\n      <ul>\n        {links.map((link) => {\n          const { title, url, icon } = link\n\n          return (\n            <li key={title}>\n              <Button href={url} data-testid=\"link\">\n                <Icon name={icon ? icon : title} />\n                {title}\n              </Button>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport var projectLinks = \"ProjectLinks-module--projectLinks--3BuFW\";\nexport var title = \"ProjectLinks-module--title--0UbVN {ProjectsYaml-slug}-module--metatitle--x2Mnj\";","import React, { useEffect, forwardRef, createRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql, useStaticQuery } from 'gatsby'\nimport ProjectImage from '../atoms/ProjectImage'\nimport { item, projectNav } from './ProjectNav.module.css'\n\nconst query = graphql`\n  query {\n    allProjectsYaml {\n      edges {\n        node {\n          title\n          slug\n          img {\n            childImageSharp {\n              ...ProjectImageNav\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst Project = forwardRef(({ node }, ref) => (\n  <Link className={item} to={node.slug} title={node.title} ref={ref}>\n    <ProjectImage\n      image={node.img.childImageSharp.gatsbyImageData}\n      alt={node.title}\n    />\n  </Link>\n))\n\nProject.displayName = 'Project'\n\nProject.propTypes = {\n  node: PropTypes.any.isRequired\n}\n\nexport default function ProjectNav({ currentSlug }) {\n  const data = useStaticQuery(query)\n  const projects = data.allProjectsYaml.edges\n\n  // Always keep the scroll position centered\n  // to currently viewed project on mount.\n  const scrollContainer = createRef()\n  const currentItem = createRef()\n\n  function scrollToCurrent() {\n    const activeItem = currentItem.current\n    const scrollRect = scrollContainer.current.getBoundingClientRect()\n    const activeRect = activeItem && activeItem.getBoundingClientRect()\n    const newScrollLeftPosition =\n      activeRect &&\n      activeRect.left -\n        scrollRect.left -\n        scrollRect.width / 2 +\n        activeRect.width / 2\n\n    scrollContainer.current.scrollLeft += newScrollLeftPosition\n  }\n\n  useEffect(() => {\n    scrollToCurrent()\n  }, [])\n\n  return (\n    <nav className={projectNav} ref={scrollContainer}>\n      {projects.map(({ node }) => {\n        const isCurrent = node.slug === currentSlug\n\n        return (\n          <Project\n            key={node.slug}\n            node={node}\n            ref={isCurrent ? currentItem : null}\n          />\n        )\n      })}\n    </nav>\n  )\n}\n\nProjectNav.propTypes = {\n  currentSlug: PropTypes.string.isRequired\n}\n","// extracted by mini-css-extract-plugin\nexport var projectNav = \"ProjectNav-module--projectNav--0pmvt Layout-module--fullWidth--KIp6D\";\nexport var item = \"ProjectNav-module--item--BQ6TE\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport { fullContainer } from '../components/Layout.module.css'\nimport ProjectImage from '../components/atoms/ProjectImage'\nimport ProjectTechstack from '../components/molecules/ProjectTechstack'\nimport ProjectLinks from '../components/molecules/ProjectLinks'\nimport ProjectNav from '../components/molecules/ProjectNav'\nimport SEO from '../components/atoms/SEO'\nimport {\n  meta,\n  headerTitle,\n  description\n} from './{ProjectsYaml.slug}.module.css'\n\nfunction ProjectMeta({ links, techstack }) {\n  return (\n    <footer className={meta}>\n      {!!links && <ProjectLinks links={links} />}\n      {!!techstack && <ProjectTechstack techstack={techstack} />}\n    </footer>\n  )\n}\n\nProjectMeta.propTypes = {\n  links: PropTypes.array,\n  techstack: PropTypes.array\n}\n\nfunction ProjectImages({ projectImages, title }) {\n  return projectImages.map(({ node }) => (\n    <ProjectImage\n      image={node.gatsbyImageData}\n      alt={title}\n      key={node.id}\n      className={fullContainer}\n    />\n  ))\n}\n\nProjectImages.propTypes = {\n  projectImages: PropTypes.array,\n  title: PropTypes.string\n}\n\nexport default function Project({ data }) {\n  const project = data.projectsYaml\n  const projectImages = data.projectImages.edges\n  const descriptionHtml = data.projectsYaml.fields.descriptionHtml\n  const { title, links, techstack } = project\n\n  return (\n    <>\n      <SEO project={project} />\n\n      <article>\n        <header>\n          <h1 className={headerTitle}>{title}</h1>\n        </header>\n        <div\n          className={description}\n          dangerouslySetInnerHTML={{ __html: descriptionHtml }}\n        />\n        <ProjectImages projectImages={projectImages} title={title} />\n        <ProjectMeta links={links} techstack={techstack} />\n      </article>\n\n      <ProjectNav currentSlug={project.slug} />\n    </>\n  )\n}\n\nProject.propTypes = {\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired\n}\n\nexport const projectQuery = graphql`\n  query ($slug: String!, $imageRegex: String!) {\n    projectsYaml(slug: { eq: $slug }) {\n      title\n      slug\n      fields {\n        descriptionHtml\n      }\n      links {\n        title\n      }\n      techstack\n      img {\n        childImageSharp {\n          twitterImage: resize(width: 980) {\n            src\n          }\n        }\n      }\n    }\n\n    projectImages: allImageSharp(\n      filter: { original: { src: { regex: $imageRegex } } }\n      sort: { fields: [original___src], order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          ...ProjectImageFluid\n        }\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nexport var headerTitle = \"{ProjectsYaml-slug}-module--headerTitle--XCUXO\";\nexport var description = \"{ProjectsYaml-slug}-module--description--zwXBj\";\nexport var meta = \"{ProjectsYaml-slug}-module--meta--PcH3G\";\nexport var metatitle = \"{ProjectsYaml-slug}-module--metatitle--x2Mnj\";"],"names":["ProjectImage","image","alt","className","G","styleProjectImage","backgroundColor","as","MetaTags","title","description","url","basics","useResume","twitterHandle","profiles","filter","network","username","defaultTitle","name","toLowerCase","label","titleTemplate","lang","content","website","rel","href","property","SEO","project","meta","useMeta","fields","excerpt","img","childImageSharp","twitterImage","src","resize","slug","techstack","map","tech","key","ProjectLinks","links","link","icon","Button","Icon","Project","forwardRef","ref","node","Link","to","gatsbyImageData","ProjectNav","currentSlug","projects","useStaticQuery","allProjectsYaml","edges","scrollContainer","createRef","currentItem","useEffect","activeItem","scrollRect","activeRect","newScrollLeftPosition","current","getBoundingClientRect","left","width","scrollLeft","isCurrent","displayName","propTypes","PropTypes","ProjectMeta","ProjectImages","projectImages","id","fullContainer","data","projectsYaml","descriptionHtml","dangerouslySetInnerHTML","__html"],"sourceRoot":""}